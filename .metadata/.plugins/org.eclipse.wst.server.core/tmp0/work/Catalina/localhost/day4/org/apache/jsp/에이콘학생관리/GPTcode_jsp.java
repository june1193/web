/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-08 02:12:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.에이콘학생관리;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class GPTcode_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>User 데이터 조작</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

    String driver = "oracle.jdbc.driver.OracleDriver";
    String url = "jdbc:oracle:thin:@localhost:1521:testdb";
    String user = "scott";
    String password = "tiger";
    
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    try {
        Class.forName(driver);
        con = DriverManager.getConnection(url, user, password);
        String action = request.getParameter("action");
        
        if (action == null) {
            // 아무 동작이 없을 경우 기본 페이지 표시

      out.write("\r\n");
      out.write("<h2>User 데이터 조작</h2>\r\n");
      out.write("<form method=\"post\" action=\"User.jsp?action=add\">\r\n");
      out.write("    ID: <input type=\"text\" name=\"id\"><br>\r\n");
      out.write("    비밀번호: <input type=\"password\" name=\"pw\"><br>\r\n");
      out.write("    이름: <input type=\"text\" name=\"name\"><br>\r\n");
      out.write("    <input type=\"submit\" value=\"등록\">\r\n");
      out.write("</form>\r\n");

        } else if (action.equals("add")) {
            // 데이터 추가
            String id = request.getParameter("id");
            String pw = request.getParameter("pw");
            String name = request.getParameter("name");
            
            pst = con.prepareStatement("INSERT INTO acorntbl (id, pw, name) VALUES (?, ?, ?)");
            pst.setString(1, id);
            pst.setString(2, pw);
            pst.setString(3, name);
            pst.executeUpdate();
            out.println("<p>데이터가 성공적으로 추가되었습니다.</p>");
            
        } else if (action.equals("delete")) {
            // 데이터 삭제
            String id = request.getParameter("id");
            
            pst = con.prepareStatement("DELETE FROM acorntbl WHERE id = ?");
            pst.setString(1, id);
            pst.executeUpdate();
            out.println("<p>데이터가 성공적으로 삭제되었습니다.</p>");
        } else if (action.equals("update")) {
            // 데이터 업데이트
            String id = request.getParameter("id");
            String pw = request.getParameter("pw");
            String name = request.getParameter("name");
            
            pst = con.prepareStatement("UPDATE acorntbl SET pw=?, name=? WHERE id=?");
            pst.setString(1, pw);
            pst.setString(2, name);
            pst.setString(3, id);
            pst.executeUpdate();
            out.println("<p>데이터가 성공적으로 변경되었습니다.</p>");
        }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th>ID</th>\r\n");
      out.write("        <th>비밀번호</th>\r\n");
      out.write("        <th>이름</th>\r\n");
      out.write("        <th>동작</th>\r\n");
      out.write("    </tr>\r\n");

        // 데이터 조회
        pst = con.prepareStatement("SELECT * FROM acorntbl");
        rs = pst.executeQuery();
        
        while (rs.next()) {

      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td>");
      out.print( rs.getString("id") );
      out.write("</td>\r\n");
      out.write("        <td>");
      out.print( rs.getString("pw") );
      out.write("</td>\r\n");
      out.write("        <td>");
      out.print( rs.getString("name") );
      out.write("</td>\r\n");
      out.write("        <td>\r\n");
      out.write("            <a href=\"User.jsp?action=delete&id=");
      out.print( rs.getString("id") );
      out.write("\">삭제</a>\r\n");
      out.write("            <a href=\"User.jsp?action=update&id=");
      out.print( rs.getString("id") );
      out.write("\">변경</a>\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");

        }

      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");

    } catch (Exception e) {
        out.println("오류 발생: " + e.getMessage());
    } finally {
        if (rs != null) rs.close();
        if (pst != null) pst.close();
        if (con != null) con.close();
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
